{
  "_args": [
    [
      {
        "raw": "bufferstreams@^1.1.0",
        "scope": null,
        "escapedName": "bufferstreams",
        "name": "bufferstreams",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/h/Desktop/coursera-Front-End Web-Development-with-React/node_modules/gulp-htmlmin"
    ]
  ],
  "_from": "bufferstreams@>=1.1.0 <2.0.0",
  "_id": "bufferstreams@1.1.3",
  "_inCache": true,
  "_location": "/bufferstreams",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bufferstreams-1.1.3.tgz_1512551005447_0.6185638038441539"
  },
  "_npmUser": {
    "name": "nfroidure",
    "email": "nicolas.froidure@insertafter.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bufferstreams@^1.1.0",
    "scope": null,
    "escapedName": "bufferstreams",
    "name": "bufferstreams",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-htmlmin"
  ],
  "_resolved": "https://registry.npmjs.org/bufferstreams/-/bufferstreams-1.1.3.tgz",
  "_shasum": "a8515ac024fa90e8fa7d58c11b13dea1f28abe72",
  "_shrinkwrap": null,
  "_spec": "bufferstreams@^1.1.0",
  "_where": "/Users/h/Desktop/coursera-Front-End Web-Development-with-React/node_modules/gulp-htmlmin",
  "author": {
    "name": "Nicolas Froidure",
    "url": "http://www.insertafter.com/blog.html"
  },
  "bugs": {
    "url": "https://github.com/nfroidure/BufferStreams/issues"
  },
  "dependencies": {
    "readable-stream": "^2.0.2"
  },
  "description": "Abstract streams to deal with the whole buffered contents.",
  "devDependencies": {
    "eslint": "^1.0.0",
    "istanbul": "^0.3.17",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "^0.0.2",
    "sf-lint": "^1.0.2",
    "streamtest": "^1.2.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-HaJnVuslRF4g2kSDeyl++AaVizoitCpL9PglzCYwy0uHHyvWerfvEb8jWmYbF1z4kiVFolGomnxSGl+GUQp2jg==",
    "shasum": "a8515ac024fa90e8fa7d58c11b13dea1f28abe72",
    "tarball": "https://registry.npmjs.org/bufferstreams/-/bufferstreams-1.1.3.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "src"
  ],
  "gitHead": "a8eace6b1874ad8c986b773c8bb5edb4a33c5af0",
  "homepage": "https://github.com/nfroidure/BufferStreams",
  "keywords": [
    "buffer",
    "streaming",
    "stream",
    "async",
    "abstract"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "nfroidure",
      "email": "nfroidure@elitwork.com"
    }
  ],
  "name": "bufferstreams",
  "optionalDependencies": {},
  "readme": "# BufferStreams\n\n[![NPM version](https://img.shields.io/npm/v/bufferstreams.svg)](https://www.npmjs.com/package/bufferstreams)\n[![Build Status](https://travis-ci.org/nfroidure/BufferStreams.svg?branch=master)](https://travis-ci.org/nfroidure/BufferStreams)\n[![Dependency Status](https://david-dm.org/nfroidure/bufferstreams.svg)](https://david-dm.org/nfroidure/bufferstreams)\n[![devDependency Status](https://david-dm.org/nfroidure/bufferstreams/dev-status.svg)](https://david-dm.org/nfroidure/bufferstreams#info=devDependencies)\n[![Coverage Status](https://coveralls.io/repos/nfroidure/BufferStreams/badge.svg?branch=master)](https://coveralls.io/r/nfroidure/BufferStreams?branch=master)\n[![Code Climate](https://codeclimate.com/github/nfroidure/BufferStreams/badges/gpa.svg)](https://codeclimate.com/github/nfroidure/BufferStreams)\n\n`bufferstreams` abstracts streams to allow you to deal with their whole content\n in a single buffer when it becomes necessary (by example: a legacy library that\n do not support streams).\n\nIt is not a good practice, just some glue. Using `bufferstreams` means:\n* there is no library dealing with streams for your needs\n* you filled an issue to the wrapped library to support streams\n\n`bufferstreams` can also be used to control the whole stream content in a single\n point of a streaming pipeline for testing purposes.\n\n##Â Usage\nInstall the [npm module](https://npmjs.org/package/bufferstreams):\n```sh\nnpm install bufferstreams --save\n```\nThen, in your scripts:\n```js\nvar fs = require('fs');\nvar bufferstreams = require('bufferstreams');\n\nfs.createReadStream('input.txt')\n  .pipe(new bufferstreams(function(err, buf, cb) {\n\n    // err will be filled with an error if the piped in stream emits one.\n    if(err) {\n      throw err;\n    }\n\n    // buf will contain the whole piped in stream contents\n    buf = Buffer(buf.toString('utf-8').replace('foo', 'bar'));\n\n    // cb is a callback to pass the result back to the piped out stream\n    // first argument is an error that will be emitted if any\n    // the second argument is the modified buffer\n    cb(null, buf);\n\n  }))\n  .pipe(fs.createWriteStream('output.txt'));\n```\n\nNote that you can use `bufferstreams` with the objectMode option. In this case,\n the given buffer will be an array containing the streamed objects:\n```js\nnew BufferStreams({objectMode: true}, myCallback);\n```\n\n## API\n\n### Stream : BufferStreams([options], callback)\n\n#### options\n\n##### options.objectMode\nType: `Boolean`\nDefault value: `false`\n\nUse if piped in streams are in object mode. In this case, an array of the\n buffered will be transmitted to the `callback` function.\n\n##### options.*\n\n`bufferstreams` inherits of Stream.Duplex, the options are passed to the\n parent constructor so you can use it's options too.\n\n##### callback(err, buf, cb)\nType: `Function`, required.\n\nA function to handle the buffered content.\n\n## Stats\n\n[![NPM](https://nodei.co/npm/bufferstreams.png?downloads=true&stars=true)](https://nodei.co/npm/bufferstreams/)\n[![NPM](https://nodei.co/npm-dl/bufferstreams.png)](https://nodei.co/npm/bufferstreams/)\n\n## Contributing\nFeel free to pull your code if you agree with publishing it under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nfroidure/BufferStreams.git"
  },
  "scripts": {
    "cli": "env NPM_RUN_CLI=1",
    "cover": "istanbul cover --report html _mocha -- tests/*.mocha.js -t 5000",
    "coveralls": "istanbul cover _mocha --report lcovonly -- tests/*.mocha.js -t 5000 && istanbul-coveralls",
    "lint": "eslint **/*.s",
    "test": "mocha tests/*.mocha.js",
    "trinity": "npm-check-updates -u && npm install && npm test && git commit package.json -m \"Dependencies update\" && git push"
  },
  "version": "1.1.3"
}
